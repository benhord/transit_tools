:mod:`transit_tools.fetch_lc`
=============================

.. py:module:: transit_tools.fetch_lc


Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   transit_tools.fetch_lc.gather_lc
   transit_tools.fetch_lc.get_2minlc
   transit_tools.fetch_lc.get_mlffi
   transit_tools.fetch_lc.get_eleanor



.. function:: gather_lc(tic, method='2min', sectors='all', return_method=False, return_sectors=False, obsinfo=None, **kwargs)

   Function to gather the light curve of a given TIC using the specified
   method. Currently, 2 minute SPOC pipeline light curves, machine learning FFI
   light curves, and eleanor light curves are supported.

   !!Add ability to support common names as inputs in absence of TIC!!
   !!Add ability for sector cuts in FFI light curves!!
   !!Add obsinfo keyword to pass obsinfo if it exists!!

   :param tic: TESS Input Catalog ID for desired target. At this time, common names are
               not accepted input, only TIC IDs.
   :type tic: int
   :param method: The method with which the light curve will be acquired. Options are
                  '2min', 'ffi_ml', and 'eleanor'.
   :type method: str
   :param sectors: List of sectors to be included in the fetching of the light curve. If
                   'all' or None is passed, all available light curves will be fetched.
                   Thresholds can be passed according to the valid syntax of the method
                   specified.
   :type sectors: str or list or numpy array
   :param return_method: A flag to indicate whether the method used to gather the light curve
                         will be returned. Useful if the chosen method is not known or expected to
                         return a valid light curve. An additional output will be expected.
   :type return_method: bool
   :param return_sectors: A flag to indicate the sectors that the light curve was recovered from.
                          An additional output will be expected. Currently in progress for most
                          methods.
   :type return_sectors: bool
   :param obsinfo: A dictionary of observational information that can be passed to make some
                   processes run faster if inlc is specified. Assumes output format of
                   transit_tools.tessobs_info command.
   :type obsinfo: dict
   :param \*\*kwargs: Additional arguments to be passed to the selected method fetching
                      function.

   :returns: * **lc** (*'LightCurve'*) -- Light curve containing light curves from all sectors contained within the
               query of sectors.
             * **method** (*str, optional*) -- The method with which the output light curve was gathered.
             * **sectors** (*numpy array, optional*) -- The sectors that the light curve was gathered from.


.. function:: get_2minlc(tic, sectors='all', thresh=None, out_sec=False, pdc_flag=True)

   Function to retrieve 2 minute cadence TESS lightcurve for a given TIC ID
   and given sectors. Returns a combined lightcurve in the form of a
   lightkurve object. If light curves from multiple sectors are combined, each
   light curve is individually normalized prior to combining.

   :param tic: TESS Input Catalog ID for desired target. At this time, common names are
               not accepted input, only TIC IDs.
   :type tic: integer
   :param sectors: List of desired sectors to include when fetching the SPOC-processed light
                   curve. If 'all' is specified, all available 2 minute PDCSAP light curves
                   will be downloaded.
   :type sectors: list, numpy array or 'all'
   :param thresh: Threshold to specify a range of sectors without knowing the specific
                  sectors that contain the target. 'AA' should be either 'gt' or 'lt' for
                  'greater than' and 'less than', respectively. ## is the threshold sector.
                  The sector number specified in the threshold will not be included in the
                  sector query. EX: 'lt13' will return all 2 minute light curves of the
                  target from sectors prior to, but not including, sector 13.
   :type thresh: string of form AA##
   :param out_sec: A flag to determine whether the sectors from which light curves were
                   downloaded are included as an output. If True, command will provide two
                   outputs, the light curve object and a numpy array of sectors, in that
                   order.
   :type out_sec: boolean
   :param pdc_flag: Flag determining whether 2 minute light curves are PDC or SAP.
   :type pdc_flag: boolean

   :returns: * **lc** (*'LightCurve'*) -- Combined light curve of all available light curves at TESS 2 minute
               cadence for specified TIC ID.
             * **secs** (*numpy array, optional*) -- List of sectors from which light curve was gathered.


.. function:: get_mlffi(tic=None, ra=None, dec=None, sectors='all', flux_type='corr', out_sec=False)

   For use on tesseract only. Fetches FFI light curves made by Brian Powell.

   :param tic: TIC ID of target. If None, both ra and dec must not be None.
   :type tic: int or None
   :param ra: RA of target. If None, tic must not be None. If not None, dec must also
              not be None.
   :type ra: float or None
   :param dec: Dec of target. If None, tic must not be None. If not None, ra must also
               not be None.
   :type dec: float or None
   :param sectors: The desired sectors to make the light curve from. May be set to 'all' to
                   use all available light curves.
   :type sectors: str or list or array
   :param flux_type: The type of correction applied to the light curve. Options are 'raw',
                     'corr', and 'pca'.
   :type flux_type: str
   :param out_sec: Flag determining whether or not the sectors that the light curve was
                   generated from are output. If True, an additional output will be
                   expected.
   :type out_sec: bool

   :returns: * **lc** (*'LightCurve' object*) -- The combined light curve.
             * **sectors** (*array*) -- The sectors from which the output light curve was generated.


.. function:: get_eleanor(sectors='all', tic=None, coords=None, out_sec=False, height=15, width=15, bkg_size=31, do_psf=False, do_pca=False, out_flux='corr_flux', norm=True, errorcalc=True, qual_flag=True)

   Function to get a light curve from the TESS full frame images (FFIs) using
   the Python package eleanor.

   !!Add more docustrings for all keywords!!
   !!Add common name processing instead of just tic!!

   :param sectors: The sectors that eleanor will use to produce the light curve. If set to
                   'all', then all available sectors will be used in the light curve
                   production.
   :type sectors: str or array or list
   :param tic: TIC ID for the object that a light curve is desired for. If set to None,
               coords must have a valid input.
   :type tic: int or None
   :param coords: The RA and Dec of the object that a light curve is desired for. Must be
                  of the form (RA, Dec) in decimal degrees. If set to None, the tic
                  argument cannot be None.
   :type coords: tuple of floats
   :param out_sec: Flag controlling whether an array containing the sectors used to extract
                   the light curve will be output. If True, an additional output will be
                   expected.
   :type out_sec: bool
   :param height: Height in pixels of the postage stamp with which to extract the light
                  curve.
   :type height: int
   :param width: Height in pixels of the postage stamp with which to extract the light
                 curve.
   :type width: int
   :param bkg_size: Background size to be considered for the background subtraction from the
                    light curve.
   :type bkg_size: int
   :param do_psf: Flag to determine whether a PSF-corrected light curve will be generated
                  as an additional option to the corrected light curve.
   :type do_psf: bool
   :param do_pca: Flag to deteremine whether a PCA-corrected light curve will be generated
                  as an additional option to the corrected light curve.
   :type do_pca: bool
   :param out_flux: Which of the light curves to output. Options are 'corr_flux', 'psf_flux',
                    and 'pca_flux'. Only one may be selected. If either 'psf_flux' or
                    'pca_flux' are selected, the do_psf and do_pca flags must be set to True,
                    respectively.
   :type out_flux: str
   :param norm: Flag determining whether the light curve will be normalized prior to
                output.
   :type norm: bool
   :param errorcalc: Flag determining whether the RMS errors will be calculated for the light
                     curve.
   :type errorcalc: bool
   :param qual_flag: Flag determining whether the timestamps with bad quality flags will be
                     excluded automatically.
   :type qual_flag: bool

   :returns: * **lc** (*'LightCurve' object*) -- The combined light curve from each sector for the coordinates or TIC ID
               requested.
             * **sectors** (*array*) -- Optional output array containing the sectors that the combined light
               curve was extracted from.


